/**
 * @openapi
 *  tags:
 *    name: Review
 *    description: API to handle book review-related operations
 */

/**
 * @openapi
 * components:
 *   schemas:
 *     Review:
 *       type: object
 *       required:
 *         - bookId
 *         - userId
 *         - text
 *         - rating
 *       properties:
 *         id:
 *           type: string
 *           description: The auto-generated id of the review
 *         bookId:
 *           type: string
 *           description: The id of the book that the review is about
 *         userId:
 *           type: string
 *           description: The id of the user that wrote the review
 *         text:
 *           type: string
 *           description: The text of the review
 *         rating:
 *           type: number
 *           description: The rating of the review
 *         date:
 *           type: string
 *           description: The date of the review
 *         likes:
 *           type: array
 *           items:
 *             type: object
 *             properties:
 *               userId:
 *                 type: string
 *                 description: The id of the user that liked the review
 *           description: The likes of the review
 *         comments:
 *           type: array
 *           items:
 *             type: object
 *             properties:
 *               commentId:
 *                 type: string
 *                 description: The id of the comment
 *           description: The comments of the review
 *       example:
 *         bookId: 123e4567-e89b-12d3-a456-426614174000
 *         userId: 123e4567-e89b-12d3-a456-426614174000
 *         text: Great book!
 *         rating: 5
 *         date: 2022-01-01
 *         likes: []
 *         comments: []
 */

/**
 * @openapi
 * components:
 *   schemas:
 *     Comment:
 *       type: object
 *       required:
 *         - reviewId
 *         - createdBy
 *         - text
 *       properties:
 *         _id:
 *           type: string
 *           description: The id of the comment (autogenerated)
 *         reviewId:
 *           type: string
 *           description: The id of the review
 *         createdBy:
 *           type: string
 *           description: The id of the user that created the comment
 *         text:
 *           type: string
 *           description: The text of the comment
 *         createdAt:
 *           type: string
 *           description: The date of the comment
 *       example:
 *         _id: 123e4567-e89b-12d3-a456-426614174000
 *         reviewId: 123e4567-e89b-12d3-a456-426614174000
 *         createdBy: 123e4567-e89b-12d3-a456-426614174000
 *         text: Great book!
 *         createdAt: 2022-01-01
 */

/**
 * @openapi
 * paths:
 *   /review/user/{id}:
 *     get:
 *       summary: Get all reviews by user idñ
 *       tags:
 *         - Review
 *       parameters:
 *         - in: path
 *           name: id
 *           required: true
 *           schema:
 *             type: string
 *           description: The user id
 *       responses:
 *         '200':
 *           description: Reviews retrieved
 *           content:
 *             application/json:
 *               schema:
 *                 type: array
 *                 items:
 *                   type: object
 *                   properties:
 *                     id:
 *                       type: string
 *                       example: 123e4567-e89b-12d3-a456-426614174000
 *                     bookId:
 *                       type: string
 *                       example: 123e4567-e89b-12d3-a456-426614174000
 *                     userId:
 *                       type: string
 *                       example: 123e4567-e89b-12d3-a456-426614174000
 *                     text:
 *                       type: string
 *                       example: Great book!
 *                     rating:
 *                       type: number
 *                       example: 5
 *                     date:
 *                       type: string
 *                       example: 2022-01-01
 *                     likes:
 *                       type: number
 *                       example: 0
 *                     comments:
 *                       type: array
 *                       items:
 *                         $ref: '#/components/schemas/Comment'
 *         '404':
 *           description: Not found
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   message:
 *                     type: string
 *                     example: Este usuario no existe
 */

/**
 * @openapi
 * paths:
 *   /review/book/{id}:
 *     get:
 *       summary: Get all reviews by book id
 *       tags:
 *         - Review
 *       parameters:
 *         - in: path
 *           name: id
 *           required: true
 *           schema:
 *             type: string
 *           description: The book id
 *       responses:
 *         '200':
 *           description: Reviews retrieved
 *           content:
 *             application/json:
 *               schema:
 *                 type: array
 *                 items:
 *                   type: object
 *                   properties:
 *                     id:
 *                       type: string
 *                       example: 123e4567-e89b-12d3-a456-426614174000
 *                     bookId:
 *                       type: string
 *                       example: 123e4567-e89b-12d3-a456-426614174000
 *                     userId:
 *                       type: string
 *                       example: 123e4567-e89b-12d3-a456-426614174000
 *                     text:
 *                       type: string
 *                       example: Great book!
 *                     rating:
 *                       type: number
 *                       example: 5
 *                     date:
 *                       type: string
 *                       example: 2022-01-01
 *                     likes:
 *                       type: number
 *                       example: 0
 *                     comments:
 *                       type: array
 *                       items:
 *                         $ref: '#/components/schemas/Comment'
 *         '400':
 *           description: Bad request
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   message:
 *                     type: string
 *                     example: Este libro no existe
 *                   details:
 *                     type: object
 *                     properties:
 *                       success:
 *                         type: boolean
 *                         example: false
 */

/**
 * @openapi
 * paths:
 *   /review:
 *     post:
 *       summary: Create a new review
 *       tags:
 *         - Review
 *       requestBody:
 *         required: true
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 bookId:
 *                   type: string
 *                   example: 123e4567-e89b-12d3-a456-426614174000
 *                 text:
 *                   type: string
 *                   example: Great book!
 *                 rating:
 *                   type: number
 *                   example: 5
 *       responses:
 *         '200':
 *           description: Review created
 *           content:
 *             application/json:
 *               schema:
 *                 $ref: '#/components/schemas/Review'
 *         '401':
 *           description: Unauthorized
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   success:
 *                     type: boolean
 *                     example: false
 *                   message:
 *                     type: string
 *                     example: Unauthorized
 *         '400':
 *           description: Bad request
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   success:
 *                     type: boolean
 *                     example: false
 *                   message:
 *                     type: string
 *                     example: Ya has hecho una reseña de este libro
 *         '404':
 *           description: Book not found
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   success:
 *                     type: boolean
 *                     example: false
 *                   message:
 *                     type: string
 *                     example: Este libro no existe
 */

/**
 * @openapi
 * paths:
 *   /review/:
 *     put:
 *       summary: Update a review
 *       tags:
 *         - Review
 *       security:
 *         - bearerAuth: []
 *       requestBody:
 *         required: true
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 bookId:
 *                   type: string
 *                   example: 123e4567-e89b-12d3-a456-426614174000
 *                 text:
 *                   type: string
 *                   example: Great book!
 *                 rating:
 *                   type: number
 *                   example: 5
 *       responses:
 *         '200':
 *           description: Review updated
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   message:
 *                     type: object
 *                     properties:
 *                       text:
 *                         type: string
 *                         example: Reseña actualizada
 *                       rating:
 *                         type: number
 *                         example: 5
 *         '401':
 *           description: Unauthorized
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   success:
 *                     type: boolean
 *                     example: false
 *                   message:
 *                     type: string
 *                     example: Unauthorized
 *         '400':
 *           description: Bad request
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   message:
 *                     type: string
 *                     example: Este usuario no tiene reseñas de este libro
 *                   details:
 *                     type: object
 *                     properties:
 *                       success:
 *                         type: boolean
 *                         example: false
 */

/**
 * @openapi
 * paths:
 *   /review/:
 *     delete:
 *       summary: Delete a review
 *       tags:
 *         - Review
 *       security:
 *         - bearerAuth: []
 *       requestBody:
 *         required: true
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 bookId:
 *                   type: string
 *                   example: 123e4567-e89b-12d3-a456-426614174000
 *       responses:
 *         '200':
 *           description: Review deleted
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   deletedReview:
 *                     $ref: '#/components/schemas/Review'
 *
 *         '400':
 *           description: Bad request
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   message:
 *                     type: string
 *                     example: No existe reseña de este libro
 *                   details:
 *                     type: object
 *                     properties:
 *                       success:
 *                         type: boolean
 *                         example: false
 *         '401':
 *           description: Unauthorized
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   success:
 *                     type: boolean
 *                     example: false
 *                   message:
 *                     type: string
 *                     example: Unauthorized
 */

/**
 * @openapi
 * paths:
 *   /review/like:
 *     post:
 *       summary: Like a review
 *       description: |
 *         Endpoint to like a review. Requires authentication with JWT. The server will receive the user's id and the userId in the request body belongs to the user who made the review.\
 *         \
 *         The userId in the request body does not belong to the user who is logged in
 *       tags:
 *         - Review
 *       security:
 *         - bearerAuth: []
 *       requestBody:
 *         required: true
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 bookId:
 *                   type: string
 *                   example: 123e4567-e89b-12d3-a456-426614174000
 *                   description: The id of the book
 *                 userId:
 *                   type: string
 *                   example: 123e4567-e89b-12d3-a456-426614174000
 *                   description: The id of the user who made the review
 *       responses:
 *         '200':
 *           description: Review liked
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   message:
 *                     type: string
 *                     example: Unlike from (user)
 */

/**
 * @openapi
 * paths:
 *   /review/like:
 *     delete:
 *       summary: Unlike a review
 *       description: |
 *         Endpoint to unlike a review. Requires authentication with JWT. The server will receive the user's id and the userId in the request body belongs to the user who made the review.\
 *         \
 *         The userId in the request body does not belong to the user who is logged in
 *       tags:
 *         - Review
 *       security:
 *         - bearerAuth: []
 *       requestBody:
 *         required: true
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 bookId:
 *                   type: string
 *                   example: 123e4567-e89b-12d3-a456-426614174000
 *                   description: The id of the book
 *                 userId:
 *                   type: string
 *                   example: 123e4567-e89b-12d3-a456-426614174000
 *                   description: The id of the user who made the review
 *       responses:
 *         '200':
 *           description: Review unliked
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   message:
 *                     type: string
 *                     example: Unlike from (user)
 *         '400':
 *           description: Bad request
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   message:
 *                     type: string
 *                     example: No existe reseña de este libro
 */

/**
 * @openapi
 * paths:
 *   /review/comment:
 *     post:
 *       summary: Comment on a review
 *       description: |
 *         Endpoint to comment on a review. Requires authentication with JWT. The server will receive the user's id and the userId in the request body belongs to the user who made the review.\
 *         \
 *         The userId in the request body does not belong to the user who is logged in
 *       tags:
 *         - Review
 *       security:
 *         - bearerAuth: []
 *       requestBody:
 *         required: true
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 userId:
 *                   type: string
 *                   example: 123e4567-e89b-12d3-a456-426614174000
 *                   description: The id of the user who made the review
 *                 bookId:
 *                   type: string
 *                   example: 123e4567-e89b-12d3-a456-426614174000
 *                   description: The id of the book
 *                 text:
 *                   type: string
 *                   example: This is a comment
 *                   description: The text of the comment
 *       responses:
 *         '200':
 *           description: Comment created
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   message:
 *                     type: object
 *                     properties:
 *                       reviewId:
 *                         type: string
 *                         example: 123e4567-e89b-12d3-a456-426614174000
 *                       createdBy:
 *                         type: string
 *                         example: 123e4567-e89b-12d3-a456-426614174000
 *                       text:
 *                         type: string
 *                         example: This is a comment
 *                       _id:
 *                         type: string
 *                         example: 123e4567-e89b-12d3-a456-426614174000
 *                         description: The id of the comment
 *                       createdAt:
 *                         type: string
 *                         example: 2022-01-01T00:00:00.000Z
 *         '400':
 *           description: Bad request
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   message:
 *                     type: object
 *                     properties:
 *                       success:
 *                         type: boolean
 *                         example: false
 *
 */

/**
 * @openapi
 * paths:
 *   /review/comment:
 *     put:
 *       summary: Update a comment on a review
 *       description: |
 *         Endpoint to update a comment. Requires authentication with JWT. The server will receive the user's id.
 *
 *       tags:
 *         - Review
 *       security:
 *         - bearerAuth: []
 *       requestBody:
 *         required: true
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 reviewId:
 *                   type: string
 *                   example: 123e4567-e89b-12d3-a456-426614174000
 *                   description: The id of the review
 *                 commentId:
 *                   type: string
 *                   example: 123e4567-e89b-12d3-a456-426614174000
 *                   description: The id of the comment
 *                 text:
 *                   type: string
 *                   example: This is a new comment
 *                   description: The text of the comment
 *       responses:
 *         '200':
 *           description: Comment updated
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   "nuevo comentario":
 *                     type: string
 *                     example: This is a new comment
 *         '400':
 *           description: Bad request
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   message:
 *                     type: object
 *                     properties:
 *                       success:
 *                         type: boolean
 *                         example: false
 */

/**
 * @openapi
 * paths:
 *   /review/comment:
 *     delete:
 *       summary: Delete a comment on a review
 *       description: |
 *         Endpoint to delete a comment. Requires authentication with JWT. The server will receive the user's id.
 *       tags:
 *         - Review
 *       security:
 *         - bearerAuth: []
 *       requestBody:
 *         required: true
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 reviewId:
 *                   type: string
 *                   example: 123e4567-e89b-12d3-a456-426614174000
 *                   description: The id of the review
 *                 commentId:
 *                   type: string
 *                   example: 123e4567-e89b-12d3-a456-426614174000
 *                   description: The id of the comment
 *       responses:
 *         '200':
 *           description: Comment deleted
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   message:
 *                     type: string
 *                     example: Comentario eliminado
 *         '401':
 *           description: Unauthorized
 *           content:
 *             application/json:
 *               schema:
 *                 type: object
 *                 properties:
 *                   message:
 *                     type: string
 *                     example: Unauthorized
 *                   success:
 *                     type: boolean
 *                     example: false
 */

/**
 * @openapi
 * paths:
 *   /review/comment/{id}:
 *     get:
 *       summary: Get comments by user id
 *       description: |
 *        Get all the comments made by a user on reviews\
 *        \
 *        The id in params is from the user who made comments in different reviews
 *       tags:
 *         - Review
 *       parameters:
 *         - in: path
 *           name: id
 *           required: true
 *           schema:
 *             type: string
 *           description: The user id
 *       responses:
 *         '200':
 *           description: Comments retrieved
 *           content:
 *             application/json:
 *               schema:
 *                 type: array
 *                 items:
 *                   type: object
 *                   $ref: '#/components/schemas/Comment'
 *                     
 */
